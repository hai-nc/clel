# -*- mode: org; -*-
#+AUTHOR: Hai NGUYEN
#+TITLE: [proof-of-concept quality] elshim - a Common Lisp library for scripting GNU Emacs


* Introduction

GNU Emacs has already been a Common Lisp IDE with the capability to run both in
the terminal and the GUI and a community and an ecosystem of packages.

This library seeks to expand its value further by letting its user:
- extend Emacs in Common Lisp
- utilize Emacs to be a text-based (blocking) user interface for Common Lisp
  applications if approriate (eg. as quick prototype for GUI during development
  or a UI that can run on both the Linux virtual terminal and GUI).
- manage breaking changes in the API's of Emacs libraries thanks to the use of
  Lisp wrappers that can be modified to adapt to the changes of the Emacs
  library API's.

The downsides of using this library, and the work-arounds or fixes for them,
include:
- If using this library for Emacs init config, then your init may break on bugs
  in this library. However, there is quick fixes for this:
  - most macros and functions symbols used for scripting in this library is
    imported verbatim (including their function/macro parameter list) so one can
    eval most expression in this library with Emacs Lisp interpreter.
  - there will be a tool in the making to transpile the Lisp
    expressions back into Elisp as a backup.
  - this problem cannot be totally eliminated, because software has
    bugs (even my Elisp init breaks sometimes).

* Dependencies

- SBCL (only tested on SBCL 2.0.11.debian on Debian Sid so far).
- GNU Emacs (only tested on Emacs 27.1 and Emacs-Sly so far).
- quicklisp (for easy installation of this library)
- sufficient RAM to run both Lisp images (my wild guess would be in the ballpark
  of 400MB for an x86_64 machine).

* Installation

This library is not in quicklisp.

To run, place this repository in your ~/quicklisp/local-projects/, then in the
Lisp REPL:

#+BEGIN_SRC lisp
   (progn (ql:register-local-projects)
          (ql:quickload 'elshim)
#+END_SRC

and in Emacs-Slime/Sly:

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
    '(slime-enable-evaluate-in-emacs t))
#+END_SRC

* Examples

Please refer to the file _init.lisp for examples of usage.

* Development

Emacs/Slime conversion of Common Lisp form to Elisp form have some gotchas,
due to:
- The conversion is through the Common Lisp reader, which omits the package
  prefix from the symbols of the current package, and all symbol's names are
  converted to UPCASE by default.
- Limited conversion capability of `swank::process-form-for-emacs' (which is
  used by `swank:eval-in-emacs' - the gateway for the Common Lisp image to send
  command to Emacs). For instance, in the code below:

#+BEGIN_SRC lisp
  (cl:eval '(list `(,2))) ; works fine
  (swank:eval-in-emacs '(list `(,2))) ; choked on ,2
#+END_SRC

** Other approaches not used

- writing a compiler (in Elisp or Common Lisp) that allow the user script
  in their Elisp syntax, then transform that code to the current version of
  Emacs for executing. This approach has a drawback that it requires the user to
  tweak Emacs help documentation system (eg. the `describe' family of functions,
  eldoc, etc) to show the user's syntax which overriding the ones of the
  built-in Elisp symbols. This makes their code dependent on Emacs's
  implementation of these document systems and thus may be fragile.
- Wrapping each and every Elisp function/macro symbols, including wrapping future ones
  via `after-load-functions': this approach makes it hard to debug due to the
  large amount of symbols being wrapped en-mass.
- This library avoid this shimming by using wrappers - so that the generated
  Common Lisp wrapper functions still gets their own documentation

* Other Solutions

- Sam Goldstein's elisp.lisp in CLOCC :: makes a Common Lisp interpreter for
  Elisp, while elshim is just wrappers that call Elisp from Emacs.

* License

GPLv3
