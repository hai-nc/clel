# -*- mode: org; -*-
#+AUTHOR: Hai NGUYEN
#+TITLE: [v0.2.1] elcl - making GNU Emacs a text-based Common Lisp user interface

* Introduction

This library's goal is to:
- utilize GNU Emacs (already an IDE for Common Lisp) to be a text-based user
  interface (whenever approriate, eg. as a quick interactive prompt, or for CL
  applications performing some sysadmin tasks that can be able to run on either
  the terminal or on the graphical desktop).
- utilize some GNU Emacs libraries in a Common Lisp application.


The approach is to make thin Lisp wrappers around Elisp built-in
functions/macros, especially those for text editing and display. It can be
extended to wrap other Emacs libraries as well.


* Limitations

- So far only tested on SBCL and Emacs-Slime on Debian Sid (due to lack of
  resources).
- Although the user can choose to wrap the full set of Elisp symbols for
  scripting, it takes around 5 minutes on SBCL (x86_64) so only a handful of
  Elisp symbols are wrapped in Lisp by default, and the user can wrap any other
  Elisp symbols (including the full set) with the library API.

* Dependencies

- SBCL (only tested on SBCL 2.0.11.debian on Debian Sid so far).
- GNU Emacs and Slime (only tested on Emacs 27.1 debian so far).
- quicklisp (optional, for easy installation of this library)
- sufficient RAM to run both Lisp images (around 350MB on my x86_64 machine).

* Installation

This library is not in quicklisp (yet).


To run, place this repository in your ~/quicklisp/local-projects/, then in the
Lisp REPL:

#+BEGIN_SRC lisp
   (progn (ql:register-local-projects)
          (ql:quickload 'elcl)
#+END_SRC

and in Emacs-Slime:

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
    '(slime-enable-evaluate-in-emacs t))
#+END_SRC

* Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:

Note: if you find a bug, please report it with the function
`elcl-bug-report'. Thank you!

Please run the following for a trial *on a fresh Emacs instance* (otherwise you
will find your Emacs look and feel altered and have to restore your config via
re-loading your init-file):

(this example just load the  file file:example.lisp)


#+BEGIN_SRC emacs-lisp
  (slime-eval `(cl:progn
                 (ql:quickload 'elcl)
                 ;; if not working, please change the code to load the
                 ;; "example.lisp" file of this repository:
                (cl:load ,(concat (file-name-directory (buffer-file-name))
                               "example.lisp")))
#+END_SRC

* Development

Emacs/Slime conversion of Common Lisp form to Elisp form have some gotchas,
due to:
- The conversion is through the Common Lisp reader, which omits the package
  prefix from the symbols of the current package, and all symbol's names are
  converted to UPCASE by default.
- Limited conversion capability of `swank::process-form-for-emacs' (which is
  used by `swank:eval-in-emacs' - the gateway for the Common Lisp image to send
  command to Emacs). For instance, in the code below:

#+BEGIN_SRC lisp
  (cl:eval '(list `(,2))) ; works fine
  (swank:eval-in-emacs '(list `(,2))) ; choked on ,2
#+END_SRC

** Other approaches not used

1. writing a compiler (in Elisp or Common Lisp) that transpile different versions
   of Elisp into one another (eg. transpiling from Elisp 25 to Elisp 26). This
   approach has a drawback: the user still use Elisp for their config instead of
   using Common Lisp.

* TODO
currently works, but:
- Takes 5 minutes for the system to wrap roughly 30K of Elisp symbols.
- Choke on naked Elisp char reader macro (eg. "?\(") due to Lisp `read-lisp'
  function does not parse this Elisp expression correctly => needs modifying
  `read-lisp' function. Currently, there is a work-around: by wrapping that
  inside the "elcl/1:#str[<...wrap into here...>]" syntax.

* Other Solutions

- Sam Goldstein's elisp.lisp in CLOCC :: makes a Common Lisp interpreter for
  Elisp, while elcl is just wrappers that call Elisp via Slime/Sly.

* License

GPLv3
